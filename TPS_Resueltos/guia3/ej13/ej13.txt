============== EJ12
Deduzca cómo se pasan las estructuras entre funciones, ¿Qué diferencia hay entre pasar una estructura por referencia o por copia? ¿Cómo es el retorno?

============== GPT:
Pasar Estructuras por Copia
Cómo funciona:

Cuando pasas una estructura por copia a una función, estás pasando una copia completa de todos los datos de la estructura. En C, esto se logra simplemente pasando la estructura como un argumento a la función, sin usar punteros.

Implicaciones:

Uso de Memoria: Cada llamada a la función duplica la cantidad de memoria utilizada por la estructura, ya que se crea una copia local en el stack de la función.
Rendimiento: Copiar estructuras grandes puede ser costoso en términos de rendimiento debido al tiempo y la memoria necesarios para copiar todos los datos.
Ejemplo en C:

c
Copy code
typedef struct {
    int edad;
    char nombre[100];
} Persona;

void modificarPersona(Persona p) {
    p.edad = 30;  // Esta modificación es local a la función.
}

int main() {
    Persona p = {25, "John"};
    modificarPersona(p);  // Se pasa una copia de 'p'.
    // 'p.edad' sigue siendo 25 aquí.
    return 0;
}

Pasar Estructuras por Referencia
Cómo funciona:

Pasar una estructura por referencia significa pasar un puntero a la estructura en lugar de una copia completa de la estructura. Esto se hace pasando la dirección de memoria de la estructura a la función.

Implicaciones:

Uso de Memoria: Solo se pasa el tamaño de un puntero, independientemente del tamaño de la estructura, lo que es más eficiente en términos de memoria.
Rendimiento: Es más rápido pasar un puntero que copiar todos los datos de una estructura grande.
Ejemplo en C:

c
Copy code
void modificarPersona(Persona *p) {
    p->edad = 30;  // Esta modificación afecta directamente a la estructura original.
}

int main() {
    Persona p = {25, "John"};
    modificarPersona(&p);  // Se pasa la dirección de 'p'.
    // 'p.edad' ahora es 30.
    return 0;
}

Retorno de Estructuras
Por Copia:

Retornar una estructura por copia desde una función simplemente devuelve una copia de la estructura. Esto puede ser ineficiente para estructuras grandes.
Por Referencia:

Es común retornar un puntero a una estructura para evitar la sobrecarga de copia. Esto puede involucrar estructuras almacenadas en el heap (usando malloc), o puede involucrar precauciones especiales si se retorna un puntero a una estructura local (que generalmente no es seguro).

=========  si pasas una estructura por copia, implicaria cargarla entera al stack previo al llamado de la funcion , no?

Sí, exactamente. Cuando pasas una estructura por copia en C, implica que toda la estructura es cargada en el stack antes de hacer el llamado a la función. Aquí te explico más a fondo cómo funciona este proceso y sus implicaciones:

Proceso de Pasar una Estructura por Copia
Copia en el Stack: Al llamar a una función y pasarle una estructura por copia, los datos de la estructura se copian en su totalidad en el área del stack de la función llamante. Este proceso implica copiar campo por campo de la estructura desde la memoria donde está almacenada hacia el stack.
Transferencia a la Función: Cuando se ejecuta el llamado a la función, el stack ya contiene una copia completa de la estructura. La función entonces accede a esta copia local como si fuera una variable local más dentro de su propio espacio de stack. Esto significa que la función trabaja con una versión independiente de la estructura, y cualquier modificación que haga no afectará a la estructura original en la función llamante.
